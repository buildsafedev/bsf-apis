// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: buildsafe/v1/app.proto

package bsfv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAppRequestMultiError, or nil if none found.
func (m *RegisterAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for RepoId

	if len(errors) > 0 {
		return RegisterAppRequestMultiError(errors)
	}

	return nil
}

// RegisterAppRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterAppRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAppRequestMultiError) AllErrors() []error { return m }

// RegisterAppRequestValidationError is the validation error returned by
// RegisterAppRequest.Validate if the designated constraints aren't met.
type RegisterAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAppRequestValidationError) ErrorName() string {
	return "RegisterAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAppRequestValidationError{}

// Validate checks the field values on RegisterAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAppResponseMultiError, or nil if none found.
func (m *RegisterAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	if len(errors) > 0 {
		return RegisterAppResponseMultiError(errors)
	}

	return nil
}

// RegisterAppResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterAppResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAppResponseMultiError) AllErrors() []error { return m }

// RegisterAppResponseValidationError is the validation error returned by
// RegisterAppResponse.Validate if the designated constraints aren't met.
type RegisterAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAppResponseValidationError) ErrorName() string {
	return "RegisterAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAppResponseValidationError{}

// Validate checks the field values on GetAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppRequestMultiError, or
// nil if none found.
func (m *GetAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for AppId

	if len(errors) > 0 {
		return GetAppRequestMultiError(errors)
	}

	return nil
}

// GetAppRequestMultiError is an error wrapping multiple validation errors
// returned by GetAppRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppRequestMultiError) AllErrors() []error { return m }

// GetAppRequestValidationError is the validation error returned by
// GetAppRequest.Validate if the designated constraints aren't met.
type GetAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppRequestValidationError) ErrorName() string { return "GetAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppRequestValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ProjectId

	// no validation rules for RepoId

	// no validation rules for Branch

	// no validation rules for Folder

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on GetAppResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppResponseMultiError,
// or nil if none found.
func (m *GetAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppResponseValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAppResponseMultiError(errors)
	}

	return nil
}

// GetAppResponseMultiError is an error wrapping multiple validation errors
// returned by GetAppResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppResponseMultiError) AllErrors() []error { return m }

// GetAppResponseValidationError is the validation error returned by
// GetAppResponse.Validate if the designated constraints aren't met.
type GetAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppResponseValidationError) ErrorName() string { return "GetAppResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppResponseValidationError{}

// Validate checks the field values on ListAppsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAppsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppsRequestMultiError, or nil if none found.
func (m *ListAppsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return ListAppsRequestMultiError(errors)
	}

	return nil
}

// ListAppsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAppsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAppsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppsRequestMultiError) AllErrors() []error { return m }

// ListAppsRequestValidationError is the validation error returned by
// ListAppsRequest.Validate if the designated constraints aren't met.
type ListAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppsRequestValidationError) ErrorName() string { return "ListAppsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppsRequestValidationError{}

// Validate checks the field values on ListAppsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAppsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppsResponseMultiError, or nil if none found.
func (m *ListAppsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAppsResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAppsResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppsResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAppsResponseMultiError(errors)
	}

	return nil
}

// ListAppsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAppsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAppsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppsResponseMultiError) AllErrors() []error { return m }

// ListAppsResponseValidationError is the validation error returned by
// ListAppsResponse.Validate if the designated constraints aren't met.
type ListAppsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppsResponseValidationError) ErrorName() string { return "ListAppsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListAppsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppsResponseValidationError{}

// Validate checks the field values on UnregisterAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterAppRequestMultiError, or nil if none found.
func (m *UnregisterAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for AppId

	if len(errors) > 0 {
		return UnregisterAppRequestMultiError(errors)
	}

	return nil
}

// UnregisterAppRequestMultiError is an error wrapping multiple validation
// errors returned by UnregisterAppRequest.ValidateAll() if the designated
// constraints aren't met.
type UnregisterAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterAppRequestMultiError) AllErrors() []error { return m }

// UnregisterAppRequestValidationError is the validation error returned by
// UnregisterAppRequest.Validate if the designated constraints aren't met.
type UnregisterAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterAppRequestValidationError) ErrorName() string {
	return "UnregisterAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterAppRequestValidationError{}

// Validate checks the field values on UnregisterAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterAppResponseMultiError, or nil if none found.
func (m *UnregisterAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnregisterAppResponseMultiError(errors)
	}

	return nil
}

// UnregisterAppResponseMultiError is an error wrapping multiple validation
// errors returned by UnregisterAppResponse.ValidateAll() if the designated
// constraints aren't met.
type UnregisterAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterAppResponseMultiError) AllErrors() []error { return m }

// UnregisterAppResponseValidationError is the validation error returned by
// UnregisterAppResponse.Validate if the designated constraints aren't met.
type UnregisterAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterAppResponseValidationError) ErrorName() string {
	return "UnregisterAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterAppResponseValidationError{}

// Validate checks the field values on AddAppDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAppDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAppDetailsRequestMultiError, or nil if none found.
func (m *AddAppDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for AppId

	// no validation rules for Branch

	// no validation rules for Folder

	if len(errors) > 0 {
		return AddAppDetailsRequestMultiError(errors)
	}

	return nil
}

// AddAppDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by AddAppDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type AddAppDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppDetailsRequestMultiError) AllErrors() []error { return m }

// AddAppDetailsRequestValidationError is the validation error returned by
// AddAppDetailsRequest.Validate if the designated constraints aren't met.
type AddAppDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppDetailsRequestValidationError) ErrorName() string {
	return "AddAppDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAppDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppDetailsRequestValidationError{}

// Validate checks the field values on AddAppDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAppDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAppDetailsResponseMultiError, or nil if none found.
func (m *AddAppDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAppDetailsResponseMultiError(errors)
	}

	return nil
}

// AddAppDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by AddAppDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type AddAppDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppDetailsResponseMultiError) AllErrors() []error { return m }

// AddAppDetailsResponseValidationError is the validation error returned by
// AddAppDetailsResponse.Validate if the designated constraints aren't met.
type AddAppDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppDetailsResponseValidationError) ErrorName() string {
	return "AddAppDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAppDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppDetailsResponseValidationError{}
