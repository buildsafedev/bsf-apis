// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: buildsafe/v1/search.proto

package bsfv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FetchPackagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchPackagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchPackagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchPackagesRequestMultiError, or nil if none found.
func (m *FetchPackagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchPackagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return FetchPackagesRequestMultiError(errors)
	}

	return nil
}

// FetchPackagesRequestMultiError is an error wrapping multiple validation
// errors returned by FetchPackagesRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchPackagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchPackagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchPackagesRequestMultiError) AllErrors() []error { return m }

// FetchPackagesRequestValidationError is the validation error returned by
// FetchPackagesRequest.Validate if the designated constraints aren't met.
type FetchPackagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchPackagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchPackagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchPackagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchPackagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchPackagesRequestValidationError) ErrorName() string {
	return "FetchPackagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchPackagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchPackagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchPackagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchPackagesRequestValidationError{}

// Validate checks the field values on FetchPackagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchPackagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchPackagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchPackagesResponseMultiError, or nil if none found.
func (m *FetchPackagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchPackagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPackages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchPackagesResponseValidationError{
						field:  fmt.Sprintf("Packages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchPackagesResponseValidationError{
						field:  fmt.Sprintf("Packages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchPackagesResponseValidationError{
					field:  fmt.Sprintf("Packages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FetchPackagesResponseMultiError(errors)
	}

	return nil
}

// FetchPackagesResponseMultiError is an error wrapping multiple validation
// errors returned by FetchPackagesResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchPackagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchPackagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchPackagesResponseMultiError) AllErrors() []error { return m }

// FetchPackagesResponseValidationError is the validation error returned by
// FetchPackagesResponse.Validate if the designated constraints aren't met.
type FetchPackagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchPackagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchPackagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchPackagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchPackagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchPackagesResponseValidationError) ErrorName() string {
	return "FetchPackagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchPackagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchPackagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchPackagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchPackagesResponseValidationError{}

// Validate checks the field values on ListPackagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPackagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPackagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPackagesRequestMultiError, or nil if none found.
func (m *ListPackagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPackagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for SearchTerm

	if len(errors) > 0 {
		return ListPackagesRequestMultiError(errors)
	}

	return nil
}

// ListPackagesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPackagesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPackagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPackagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPackagesRequestMultiError) AllErrors() []error { return m }

// ListPackagesRequestValidationError is the validation error returned by
// ListPackagesRequest.Validate if the designated constraints aren't met.
type ListPackagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackagesRequestValidationError) ErrorName() string {
	return "ListPackagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPackagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackagesRequestValidationError{}

// Validate checks the field values on ListPackagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPackagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPackagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPackagesResponseMultiError, or nil if none found.
func (m *ListPackagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPackagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	// no validation rules for TotalPages

	if len(errors) > 0 {
		return ListPackagesResponseMultiError(errors)
	}

	return nil
}

// ListPackagesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPackagesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPackagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPackagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPackagesResponseMultiError) AllErrors() []error { return m }

// ListPackagesResponseValidationError is the validation error returned by
// ListPackagesResponse.Validate if the designated constraints aren't met.
type ListPackagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackagesResponseValidationError) ErrorName() string {
	return "ListPackagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPackagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackagesResponseValidationError{}

// Validate checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Package) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PackageMultiError, or nil if none found.
func (m *Package) ValidateAll() error {
	return m.validate(true)
}

func (m *Package) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Revision

	// no validation rules for Version

	// no validation rules for Description

	// no validation rules for Homepage

	// no validation rules for Free

	// no validation rules for SpdxId

	// no validation rules for EpochSeconds

	if len(errors) > 0 {
		return PackageMultiError(errors)
	}

	return nil
}

// PackageMultiError is an error wrapping multiple validation errors returned
// by Package.ValidateAll() if the designated constraints aren't met.
type PackageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageMultiError) AllErrors() []error { return m }

// PackageValidationError is the validation error returned by Package.Validate
// if the designated constraints aren't met.
type PackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageValidationError) ErrorName() string { return "PackageValidationError" }

// Error satisfies the builtin error interface
func (e PackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageValidationError{}

// Validate checks the field values on FetchPackageVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchPackageVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchPackageVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchPackageVersionRequestMultiError, or nil if none found.
func (m *FetchPackageVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchPackageVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return FetchPackageVersionRequestMultiError(errors)
	}

	return nil
}

// FetchPackageVersionRequestMultiError is an error wrapping multiple
// validation errors returned by FetchPackageVersionRequest.ValidateAll() if
// the designated constraints aren't met.
type FetchPackageVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchPackageVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchPackageVersionRequestMultiError) AllErrors() []error { return m }

// FetchPackageVersionRequestValidationError is the validation error returned
// by FetchPackageVersionRequest.Validate if the designated constraints aren't met.
type FetchPackageVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchPackageVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchPackageVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchPackageVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchPackageVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchPackageVersionRequestValidationError) ErrorName() string {
	return "FetchPackageVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchPackageVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchPackageVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchPackageVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchPackageVersionRequestValidationError{}

// Validate checks the field values on FetchPackageVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchPackageVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchPackageVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchPackageVersionResponseMultiError, or nil if none found.
func (m *FetchPackageVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchPackageVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchPackageVersionResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchPackageVersionResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchPackageVersionResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchPackageVersionResponseMultiError(errors)
	}

	return nil
}

// FetchPackageVersionResponseMultiError is an error wrapping multiple
// validation errors returned by FetchPackageVersionResponse.ValidateAll() if
// the designated constraints aren't met.
type FetchPackageVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchPackageVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchPackageVersionResponseMultiError) AllErrors() []error { return m }

// FetchPackageVersionResponseValidationError is the validation error returned
// by FetchPackageVersionResponse.Validate if the designated constraints
// aren't met.
type FetchPackageVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchPackageVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchPackageVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchPackageVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchPackageVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchPackageVersionResponseValidationError) ErrorName() string {
	return "FetchPackageVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchPackageVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchPackageVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchPackageVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchPackageVersionResponseValidationError{}
